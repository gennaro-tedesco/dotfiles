# user information
[user]
	name = Gennaro Tedesco
	username = gennaro-tedesco

# push-pull-merge defaults
[push]
	default = current

[pull]
	rebase = false

[merge]
	conflictstyle = diff3

# pager and default editor
[core]
	editor = $EDITOR
	pager = delta

[delta]
	features = side-by-side
	line-numbers = true
	hunk-header-style = omit
	navigate = true

# alias
[alias]
	logs = log --abbrev-commit --oneline --stat --format=format:'%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset): %s %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
	s = status -s
	c = checkout -- .
	d = diff --name-only
	qminto = "!f() { \
		[ -z $1 ] && { echo 'specify branch name'; exit; }; \
		cb=$(git branch --show-current); \
		git checkout ${1} 2>/dev/null && git merge $cb && git push origin ${1} && git checkout $cb; \
	}; f"
	check = "!f() { \
		[ ! -f ${1} ] && { echo 'file does not exist' ; exit; } || tracked=$(git ls-files ${1}); \
		[ -z ${tracked} ] && echo 'file not tracked' || echo 'file tracked'; \
	};  f"
	root = rev-parse --show-toplevel
	cherrypick = "!f() { \
		from_branch=$(git branch | fzf --prompt 'pick from branch:') && files=$(fzf --query=$1 --multi --select-1 --exit-0 --prompt 'files:'); \
		[[ -n ${files} ]] && git restore --source ${from_branch} ${files}; \
	}; f"
