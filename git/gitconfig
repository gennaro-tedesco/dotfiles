# user information
[user]
	name = Gennaro Tedesco
	username = gennaro-tedesco

# push-pull-merge defaults
[push]
	default = current

[pull]
	rebase = false

[merge]
	conflictstyle = diff3

# pager and default editor
[core]
	editor = $EDITOR
	pager = delta

[delta]
	features = side-by-side
	line-numbers = true
	hunk-header-style = omit
	navigate = true

# alias
[alias]
	logs = "!f() { \
		commit=$(git log --oneline --color=always | fzf --prompt=\"$(git branch --show-current): \" --ansi --preview=\"echo {} | cut -f1 -d' ' | xargs -n1 git show --stat --abbrev-commit --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset): %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset)'  --color=always\"); \
			[[ -n ${commit} ]] && echo $commit | cut -f1 -d' ' | xargs -n1 git show; \
	}; f"
	s = status -s
	c = checkout -- .
	d = diff --name-only
	qminto = "!f() { \
		[ -z $1 ] && { echo 'specify branch name'; exit; }; \
		cb=$(git branch --show-current); \
		git checkout ${1} 2>/dev/null && git merge $cb && git push origin ${1} && git checkout $cb; \
	}; f"
	root = rev-parse --show-toplevel
	pick = "!f() { \
		from_branch=$(git branch | fzf --prompt 'pick from branch:') && files=$(git diff --name-only ${from_branch} | fzf --query=$1 --multi --select-1 --exit-0 --prompt 'files:'); \
		[[ -n ${files} ]] && git restore --source ${from_branch} ${files}; \
	}; f"
