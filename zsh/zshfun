## ----------------
## custom functions
## ----------------

# mkdir and cd
mkcd() {
	mkdir -p -- "$1" && cd -P -- "$1"
}


# fzf browse files
find_files() {
	IFS=$'\n' files=($(fzf --query="$1" --multi --select-1 --exit-0 --prompt 'files:' --preview='exa --tree --level=1 $(dirname {})'))
	[[ -n "$files" ]] && ${EDITOR} "${files[@]}"
}


# fzf browse directories and cd into them
find_dir() {
	local dir
	dir=$(fd -IH -t d -E '.git' 2> /dev/null | fzf --prompt 'folders:' +m --preview-window='right:50%:nohidden:wrap' --preview='exa --tree --level=2 {}') && cd "$dir"
}


# list env variables
list_env() {
	local var
	var=$(printenv | cut -d= -f1 | fzf --prompt 'env:' --preview='printenv {}') \
		&& echo "$var=$(printenv "$var")" \
		&& unset var
}


# list go env variables
list_goenv() {
	local var
	var=$(go env | cut -d= -f1 | fzf --prompt 'env:' --preview='go env {}') \
		&& echo "$var=$(go env "$var")" \
		&& unset var
}


# search regex in current directory
search() {
	[[ $# -eq 0 ]] && { echo "provide regex argument"; return }
	local matching_files
	case $1 in
		-h)
			shift
			regex=$1
			matching_files=$(rg -l --hidden ${regex} | fzf --exit-0 --preview="rg --color=always -n '${regex}' {} ")
			;;
		-i)
			shift
			regex=$1
			matching_files=$(rg -i -l --hidden ${regex} | fzf --exit-0 --preview="rg -i --color=always -n '${regex}' {} ")
			;;
		*)
			regex=$1
			matching_files=$(rg -l -- ${regex} | fzf --exit-0 --preview="rg --color=always -n -- '${regex}' {} ")
			;;
	esac
	[[ -n "$matching_files" ]] && ${EDITOR} "${matching_files}" -c/${regex}
}


# replace
replace() {
	[[ ! "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]] && { echo "not a git repo"; return }

	local find_regex=$(gum input --prompt="find regex: " --placeholder="find pattern...")
	if [[ -z "$find_regex" ]] then
		return
	fi
	local matching_files=$(rg -l --count-matches $find_regex | column -s: -t)

	if [[ -n "$matching_files" ]] then
		gum style --border rounded --foreground "#d33682" --border-foreground "#2aa198" --margin "1 1" --padding "1 1" $matching_files
	else
		echo "no matching files"
		return
	fi

	local replace_regex=$(gum input --prompt="replace regex: " --placeholder="replace pattern...")
	if [[ ! -z "$replace_regex" ]] then
		gum confirm "replace $find_regex with $replace_regex ?" && \
		echo $matching_files | \
		cut -f1 -d' ' | \
		xargs -n 1 -I {} -t sed -i '' "s/$find_regex/$replace_regex/g" {}
	else
		return
	fi
}


# paginate help
help() { "$@" --help | bat -l man -p ; }


# preview files
preview_files() {
	local selection
	if [[ -z "$1" ]]; then
		selection="$(fd -u -t f -E '.git/' | fzf)" && preview_files "$selection"
		return 0
	fi

	case $1 in
		-e)
			shift
			selection="$(fd -u -t f -E '.git/' -e $1 | fzf --multi --select-1 --exit-0 | tr '\n' ' ')"
			[[ -n "$selection" ]] && preview_files "${(z)selection}"
			shift
			;;
		*.md)
			glow -s ~/.config/glowconfig/customglow.json -p $@;;
		*.json)
			jq '.' -C $1 | less;;
		*.csv)
			vd "$@";;
		*.pdf)
			zathura $1;;
		*)
			bat --theme='Solarized (dark)' --style='header,grid' $@;;
	esac
}


# quick commit all
quick_commit(){
	[[ ! "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]] && { echo "not a git repo"; return; }

	local unstaged_list="$(git status -s)"
	if [[ -z "$unstaged_list" ]] then
		echo "no files to commit"
		return
	fi

	gum style --border rounded --foreground "#d33682" --border-foreground "#2aa198" --margin "1 1" --padding "1 1" $unstaged_list

	local message=$(gum input --prompt="commit: " --placeholder="commit message...")

	if [[ -z "$message" ]] then
		echo "commit aborted"
		return
	fi

	gum confirm "add files and commit?" && \
	git add . && git commit -m "$message" && \
	gum confirm "push to $(git rev-parse --abbrev-ref --symbolic-full-name @{u})?" && gum spin --spinner dot --title "git push..." --show-output -- git push
}

# json_diff
json_diff() {
	if [[ $# -eq 2 ]] then
		delta =(jq -S . $1) =(jq -S . $2)
	else
		echo "expected two arguments"
	fi
}


# curl weather
weather() {
	local location
	[[ $# -eq 0 ]] && location="Berlin" || location=$1
	curl wttr.in/${location}\?F
}
