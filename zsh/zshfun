## ----------------
## custom functions
## ----------------

# calculator
calc() {
	lua -e 'print('$1')'
}

# mkdir and cd
mkcd () {
  mkdir -p -- "$1" && cd -P -- "$1"
}


# fzf browse files
ff() (
  IFS=$'\n' files=($(fzf --query="$1" --multi --select-1 --exit-0 --prompt 'files:'))
  [[ -n "$files" ]] && ${EDITOR} "${files[@]}"
)


# fzf browse directories and cd into them
fd() {
  local dir
  dir=$(find . -not -path '*/\.*' -type d 2> /dev/null | fzf --prompt 'folders:' +m --preview-window='right:50%:nohidden:wrap' --preview='exa --tree --level=2 {}') && cd "$dir"
}


# list man pages
list_man() {
  local manlist manpage
  manlist=$(man -k . 2>/dev/null | awk 'BEGIN {FS=OFS="- "} /\([1|4]\)/ {gsub(/\([0-9]\)/, "", $1); if (!seen[$0]++) { print }}' | fzf --prompt 'man:') \
    && man "$(echo "$manlist" | awk -F' |,' '{print $1}')" \
    && unset manlist
}


# list env variables
list_env() {
  local var
  var=$(printenv | cut -d= -f1 | fzf --prompt 'env:' --preview='printenv {}') \
    && echo "$var=$(printenv "$var")" \
    && unset var
}


# list go env variables
list_goenv() {
  local var
  var=$(go env | cut -d= -f1 | fzf --prompt 'env:' --preview='go env {}') \
    && echo "$var=$(go env "$var")" \
    && unset var
}


# search regex in current directory
search(){
  [[ $# > 1 ]] && { echo "pass one regex argument only"; return }
  [[ $# -eq 0 ]] && { echo -n "search regex: "; read -r regex} || regex=$1
  local matching_files
  matching_files=$(rg -l ${regex} | fzf --preview="rg '${regex}' {} --color=always -n")
  [[ -n "$matching_files" ]] && ${EDITOR} "${matching_files}" -c/${regex}
}


# paginate help
help() { "$@" --help | bat -l man -p ; }


# preview files
preview_files () {
	local selection
	if [[ -z "$1" ]]; then
		selection="$(echo *(^/) | tr " " "\n" | fzf)" && preview_files "$selection"
		return 0
	fi
	case $1 in
		*.md)
			glow -s ~/.config/glowconfig/customglow.json -p $1;;
		*.json)
			jq '.' -C $1 | less;;
		*.csv)
			vd "$@";;
		*.pdf)
			zathura $1;;
		*)
			bat --theme='Solarized (dark)' --style='header,grid' $1;;
	esac
}


# json_diff
json_diff(){
	[[ $# != 2 ]] && { echo "expected two arguments"; return}
	[[ ( $1 != *.json ) || ( $2 != *.json ) ]] && { echo "arguments must be both json files"; return}
	[[ ! -f $1 ]] && { echo "cannot find $1"; return}
	[[ ! -f $2 ]] && { echo "cannot find $2"; return}

	delta =(jq -S . $1) =(jq -S . $2)
}


# curl weather
weather(){
	local location
	[[ $# -eq 0 ]] && location="Berlin" || location=$1
	curl wttr.in/${location}\?F
}
