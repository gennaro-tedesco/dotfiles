% cut, column

# select columns from tabular delimiters
gcut -f<colNr> -d, <filename>

# omit columns from tabular delimiters
gcut -f<colNr> -d, --complement <filename>

# columnate tabular data
column -t -s, <filename>

$ filename: ls -p | grep -v / | awk '{print $NF}'


% sed

# print row by index
sed '<index>!d' <filename>

# replace within file
sed -i 's/<original-text>/<new-text>/g' <filename>

# remove all white spaces
sed 's/[[:space:]]//g' <filename>

# remove all lines containing a pattern
sed -i '/<pattern>/d' <filename>

$ filename: ls -p | grep -v / | awk '{print $NF}'


% ssh

# Access via ssh
ssh username-remote

# Copy file from server to local
scp username-remote:file-to-send where-to-put

# Copy file from local to server
scp file-to-send username-remote:where-to-put


% env file

# export .env file
export $(xargs < .env)


% jq

# show all keys and subkeys in json file with jq
jq -r '[paths | join(".")]' <json-file>

# select keys in a list
jq 'with_entries(select(.key | in({"key2":1, "key12":1})))' <json-file>

$json-file: ls *.json


% brew

# update out of date packages
brew upgrade $(brew outdated | fzf)


% tr

# highlight white spaces and tabs
tr " " "␣" < <filename> | tr "\t" "→"

# convert to lowercase
tr "[:upper:]" "[:lower:]" < <filename>

$ filename: ls | grep -v / | awk '{print $NF}'


% curl

# get request with json body
curl -s -H "Content-Type: application/json" -X POST -d @path/to/json/body "$APP_HOST:$APP_PORT/endpoint" | jq


%man

# man page of bash conditionals
man test
