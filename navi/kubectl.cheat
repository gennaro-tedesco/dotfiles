% kubectl

# view pod logs
kubectl logs --follow <pod> | tl

# view current configuration
kubectl config view --minify -o jsonpath='{..context}' | jq

# view current namespace
kubectl config view --minify -o jsonpath='{..namespace}'

# switch namespace
kubectl config set-context --current --namespace=<namespace>

# view all pods from a specific namespace
kubectl get pods -n <namespace>

# view all contexts
kubectl config get-contexts | awk -F" " '{print $2, $3}' | column -t -s" "

# switch context
kubectl config use-context <context>

# show env variables of a pod
kubectl exec <pod> -- env | sort | bat -l bash -p

# get timestamps of pod conditions
kubectl get pod <pod> -o jsonpath='{.status.conditions}' | jq '.[] | {type, status, lastTransitionTime}'

# get timestamps of pod events
kubectl events --for pod/<pod> -o jsonpath='{.items}' | jq '.[] | {type, message, lastTimestamp}'

# restart a deployment
kubectl rollout restart deployment <deployment> -n <namespace>

# get remote port listening to
kubectl get pod <pod> -o jsonpath='{.spec.containers[*].ports[*].containerPort}'

# port-forward
kubectl port-forward <pod> <LOCAL_PORT>:<REMOTE_PORT>

# group by pod string and count status
kubectl get pods | grep <pod-string> | tr -s ' ' | cut -f3 -d ' ' | sort | uniq -c

$ namespace: kubectl get namespace | cut -d" " -f1 | tail -n +2 | sort
$ context: kubectl config get-contexts | awk -F" " '{print $2}' | tail -n +2 | sort
$ pod: kubectl get pod | awk -F" " '{print $1}' | tail -n +2 | sort
$ deployment: kubectl get deployments | awk -F" " '{print $1}' | tail -n +2 | sort
